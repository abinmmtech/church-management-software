-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================

For login users:

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    password_hint VARCHAR(255) NOT NULL,
    mobile VARCHAR(10) NOT NULL,
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add triggers to update the updated_at field automatically
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Optional indexes for faster searches
CREATE INDEX idx_users_mobile ON users (mobile);
CREATE INDEX idx_users_email ON users (email);




GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO church_admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO church_admin;

SELECT * FROM users;
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================

Can execute together:
-- ============================
-- Table 1: Families (Family Unit)
-- ============================

CREATE TABLE families (
    id SERIAL PRIMARY KEY, -- Unique Family ID
    church_id INTEGER NOT NULL, -- Church ID (required)
    association_id INTEGER, -- Association ID (optional)
    address TEXT NOT NULL, -- Family address (required)
    pincode INTEGER NOT NULL, -- Pincode (required)
    kudumba_unit TEXT NOT NULL, -- Kudumba Unit (required)
    ward_number TEXT, -- Ward number (optional)
    house_number TEXT, -- House number (optional)
    hof_member_id INTEGER, -- Current HOF member (links to family_members.id)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Record created time
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last update time
);

-- ============================
-- Table 2: Family Members (Individuals)
-- ============================

CREATE TABLE family_members (
    id SERIAL PRIMARY KEY, -- Unique Member ID
    family_id INTEGER NOT NULL REFERENCES families(id) ON DELETE CASCADE, -- Family link
    name TEXT NOT NULL, -- Name (required)
    church_id INTEGER NOT NULL, -- Church ID (from HOF)
    association_id INTEGER, -- Association ID (from HOF)
    mobile BIGINT NOT NULL, -- Mobile number (required)
    address TEXT NOT NULL, -- Address (from HOF)
    pincode INTEGER NOT NULL, -- Pincode (from HOF)
    kudumba_unit TEXT NOT NULL, -- Kudumba Unit (from HOF)
    ward_number TEXT, -- Ward number (from HOF)
    house_number TEXT, -- House number (from HOF)
    gender VARCHAR(10) NOT NULL, -- Gender (required)
    dob DATE NOT NULL, -- Date of Birth (required)
    age INTEGER NOT NULL, -- Age (calculated and stored)
    relation VARCHAR(50) NOT NULL DEFAULT 'HOF', -- Relation (HOF or Member)
    marital_status VARCHAR(50) NOT NULL, -- Marital status (required)
    date_of_marriage DATE, -- Date of marriage (optional)
    baptism_name TEXT, -- Baptism Name (optional)
    date_of_baptism DATE, -- Date of Baptism (optional)
    aadhar BIGINT, -- Aadhar number (optional)
    email TEXT, -- Email (optional)
    education TEXT, -- Education (optional)
    profession TEXT, -- Profession (optional)
    blood_group VARCHAR(10), -- Blood group (optional)
    is_hof BOOLEAN DEFAULT FALSE, -- Quick check for HOF status
    is_alive BOOLEAN DEFAULT TRUE, -- For future HOF replacement
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Record created time
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last update time
);

-- ============================
-- Foreign Key constraint for HOF reference
-- ============================

ALTER TABLE families
ADD CONSTRAINT fk_hof_member
FOREIGN KEY (hof_member_id)
REFERENCES family_members(id)
ON DELETE SET NULL;

-- ================================
-- Optional: To keep data up to date, let's add triggers for updated_at
-- ================================

-- Trigger function to update the updated_at field
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

-- Add trigger to families table
CREATE TRIGGER update_families_updated_at
BEFORE UPDATE ON families
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

-- Add trigger to family_members table
CREATE TRIGGER update_family_members_updated_at
BEFORE UPDATE ON family_members
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================
-- ==================================================================================================================================================================